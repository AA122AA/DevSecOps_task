version: "3.9"

services:
  serv_1_web:
    build: ./service_1
    container_name: serv_1_web
    ports:
      - "8000:5000"
    healthcheck:
      test: python check_health.py
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  serv_2_web:
    build: ./service_2
    container_name: serv_2_web
    ports:
      - "8001:5000"
    networks:
      - mongodb_network
    healthcheck:
      test: python check_health.py
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  serv_3_web:
    build: ./service_3/app
    container_name: serv_3_web
    ports:
      - "8002:5000"
    networks:
      - rabbitmq_network
    healthcheck:
      test: python check_health.py
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  receiver:
    build: ./service_3/receiver
    container_name: receiver
    networks:
      - rabbitmq_network
      - mongodb_network
    depends_on:
      - mongodb
      - rabbitmq
    healthcheck:
      test: python check_health.py
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  mongodb:
    image: mongo:4.2
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=artem
      - MONGO_INITDB_ROOT_PASSWORD=0000
    volumes:
      - ./db:/data/db
      - ./service_2/docker-entrypoint-initdb.d/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    networks:
      - mongodb_network
    ports:
      - 27017:27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  rabbitmq:
    image: 'rabbitmq:3.11'
    container_name: rabbitmq
    ports:
      - '5672:5672'
    networks:
      - mongodb_network
      - rabbitmq_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s

  elasticsearch:
    build: ./health_check/elasticsearch/
    container_name: elasticsearch
    volumes:
      - type: bind
        source: ./health_check/elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - elk

  kibana:
    build: ./health_check/kibana/
    container_name: kibana
    volumes:
      - type: bind
        source: ./health_check/kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

  metricbeat:
    build: ./health_check/metricbeat/
    container_name: metricbeat
    user: root
    networks:
      - elk
      - mongodb_network
      - rabbitmq_network
    volumes:
      - type: bind
        source: ./health_check/metricbeat/config/metricbeat.yml
        target: /usr/share/metricbeat/metricbeat.yml
        read_only: true
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - elasticsearch
    restart: unless-stopped

networks:
  mongodb_network:
    external: false
  rabbitmq_network:
    external: false
  elk:
    external: false
    driver: bridge
